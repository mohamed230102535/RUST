Rust is systems programming language

Systems programming language : 
Low-level system development, 
such as writing operation systemm, device drivers,
compliers, game engine , or embedded system 


Rust Balance :
    -Speed
    -Safty
    -Concurrency
    -Portability : complie once and run everywhere

Memory Managment :

# LowLevel language like c++ provide functions for memory allcation

rust uses ownership borrowing

CARGO package manager : is similar to npm for node or pip for python




test.rs file :
You will need to complie the file everytime you run
using this commands :
    rustc test.rs
then run it
    ./test

but for projects it will complie auto..
    cargo new projectName

Rust has two types of format :
    Debuggable Format
    Display Format


using strings u will need to convert it to string :
    "Mohamed".to_string()

# rust is fast because it is close to the hardware
# rust compiled to machine code in no time the same thing as c and c ++
# but with no garbage collection and automatic memory management 

when u declare a variable (string) is going to be allocated on the heap because it is dynamic allocaton


Rust dataType is by default is immutable that means u cannot change it
so u will need to defined the variable using mut so u can change it 
    let mut variable: dataType= value;



---->            Primitive data types:

int , float, bool , char

Integer :
    Signed Integers (+ and -):i8 ,i16 ,i32 ,i64 ,i128
    Unsigned Integers (only +):u8 ,u16 ,u32 ,u64 ,u128

    # i32 (32 bits range 	-2,147,483,648 ===> 2,147,483,647)

    # unsigned integers are little bit lager than the 
    # signed integers due to the power
Float :

    f32 , f64

Boolean : 
    bool

Char :
    char


----->            Compound Data types:

Arrays , tuples, slices, and strings (slice string)

// Array
//cannot mix int and str

    let num: [i32;5] = [1,-2,3,-4,5];

    println!("the numbers are : {:?}",num);

// Tuples

    let mixed_tuples = ("hamda",34,true,[1,2,3,4]);

    println!("{:?}",mixed_tuples);

//Slices : 

is contagious sequnece which make it good thing for memory allocation
and memory efficiency 

Strings vs string Slices ($str)
 Strings [growable, mutable, owned string type]

Rust has two primary string types:

# &str (string slices) ‚Üí Immutable and fixed-length.
# String ‚Üí Mutable and dynamically allocated.

Using String::from() ensures that "Hello, world!" is stored in a String type, allowing it to be modified later.

# let mut stone_cold: String = String::from("Hell, ");

String is growable, but the variable itself must be mutable (mut) to allow modification.


----->            Function:

# an function / variables should be written in snake case

==> sanke case: hello_world
==> kebab case: hello-world

rust support hoisting so u can call function anywhere in your code.

hoisting also exist in javascript

//Expressions and Statements

Expression: Anything that returens a value.


Statement: Anything that does not return a value.
    Almost all statements in Rust end with ---> ;
    let y = let x = 10; cannot assign statement to another statement 
    1 Variable declarations : let x = 5;
    2 Function definitions : fn foo() { }
    3 Control flow statements: 
        - if condition {/* code */}
        else     {/* code */}
        - while condition {} 


# use const or static for global variables



----->            Ownership:

c, c++ -> Memory Management Control Issue
Garbage Collector solved this issue, but created a new issue -> Slow Performance :[stopping/ Resuming the program]

Ownership introduced by Rust to solve memory safety issues and high performance at the same time. 

What is Ownership ?
Every value has a single owner [every variable has one value, and it is its sole owner].

Borrowing allows you to temporarily borrow reference to values which enables safe concurrent access without sacrificing the memory safety

 Ownership rules :
 1 - Each value in Rust has a variable that's its owner.
 2 - There can be only one owner at a time.
 3 - When the owner goes out of scope, the value will be dropped.

----->            Borrowing and References:
Safety and Performance
Borrowing references are powerful concepts

# References: Enable you to borrow values without taking ownership. ---> &

# u can have only one mutable reference or many immutable references

Prevents :
    1. Null Pointer Dereferencing

       - In C and C++, dereferencing a NULL or uninitialized pointer causes crashes.

       - Rust has no null pointers! Instead, it uses Option<T> to handle cases where a value might be absent.

    2. Dangling Pointers

        - In C/C++, accessing memory after it has been freed leads to undefined behavior.

        - Rust prevents this at compile time by enforcing ownership and borrowing rules.

    3. Buffer Overflows

        - Rust ensures memory safety with bounds checking on arrays and slices.

        - In C, accessing out-of-bounds memory can cause security vulnerabilities.

    4. Data Races (in Multi-threaded Code)
        - A data race happens when:

            . Two threads access the same memory location.
            . At least one access is a write.
            . There is no synchronization.

        - Rust prevents this with ownership and borrowing:

            . Immutable references (&T) allow multiple readers.
            . Mutable references (&mut T) allow only one writer.
----------------------------------------------------------------------------

# u can have only one mutable reference or many immutable references

‚úÖ Many immutable references (&) are OK:
    fn main() {
        let x = 10;
        let r1 = &x;
        let r2 = &x;  // Multiple people reading üìñ
        
        println!("{} and {}", r1, r2); // Works fine!
    }

üö® But you cannot mix mutable and immutable references:
    fn main() {
        let mut x = 10;
        let r1 = &x;
        let r2 = &mut x;  // ‚ùå ERROR! Cannot mix mutable and immutable

        println!("{}", r1);
    }
# Rust prevents this to avoid problems like data races (reading while writing).

‚úÖ Correct way to use mutable references :

    fn main() {
        let mut x = 10;
        
        {
            let r = &mut x;  // Only ONE mutable reference allowed
            *r += 5;         // Changing the value
        } // r goes out of scope here ‚úÖ

        let r2 = &x;  // Now we can read safely
        println!("{}", r2); // Prints 15
    }
----------------------------------------------------------------------------

STRUCT : also in c and c++
    A data structure that allows you to group multiple fields
    together under one name.



# Note 
    - immutable variable will be in the stack memory  

    - mutable variable will be in the heap memory
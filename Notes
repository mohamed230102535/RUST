Rust is systems programming language

Systems programming language : 
Low-level system development, 
such as writing operation systemm, device drivers,
compliers, game engine , or embedded system 


Rust Balance :
    -Speed
    -Safty
    -Concurrency
    -Portability : complie once and run everywhere

Memory Managment :

# LowLevel language like c++ provide functions for memory allcation

rust uses ownership borrowing

CARGO package manager : is similar to npm for node or pip for python




test.rs file :
You will need to complie the file everytime you run
using this commands :
    rustc test.rs
then run it
    ./test

but for projects it will complie auto..
    cargo new projectName

Rust has two types of format :
    Debuggable Format
    Display Format


using strings u will need to convert it to string :
    "Mohamed".to_string()

# rust is fast because it is close to the hardware
# rust compiled to machine code in no time the same thing as c and c ++
# but with no garbage collection and automatic memory management 

when u declare a variable (string) is going to be allocated on the heap because it is dynamic allocaton


Rust dataType is by default is immutable that means u cannot change it
so u will need to defined the variable using mut so u can change it 
    let mut variable: dataType= value;



---->            Primitive data types:

int , float, bool , char

Integer :
    Signed Integers (+ and -):i8 ,i16 ,i32 ,i64 ,i128
    Unsigned Integers (only -):u8 ,u16 ,u32 ,u64 ,u128

    # i32 (32 bits range 2147483647)

    # unsigned integers are little bit lager than the 
    signed integers due to the power
Float :

    f32 , f64

Boolean : 
    bool

Char :
    char


----->            Compound Data types:

Arrays , tuples, slices, and strings (slice string)

// Array
//cannot mix int and str

    let num: [i32;5] = [1,-2,3,-4,5];

    println!("the numbers are : {:?}",num);

// Tuples

    let mixed_tuples = ("hamda",34,true,[1,2,3,4]);

    println!("{:?}",mixed_tuples);

//Slices : 

is contagious sequnece which make it good thing for memory allocation
and memory efficiency 

Strings vs string Slices ($str)
 Strings [growable, mutable, owned string type]

Rust has two primary string types:

# &str (string slices) → Immutable and fixed-length.
# String → Mutable and dynamically allocated.

Using String::from() ensures that "Hello, world!" is stored in a String type, allowing it to be modified later.

# let mut stone_cold: String = String::from("Hell, ");

String is growable, but the variable itself must be mutable (mut) to allow modification.


----->            Function:

# an function / variables should be written in snake case

==> sanke case: hello_world
==> kebab case: hello-world

rust support hoisting so u can call function anywhere in your code.

hoisting also exist in javascript

//Expressions and Statements

Expression: Anything that returens a value.


Statement: Anything that does not return a value.
    Almost all statements in Rust end with ---> ;
    let y = let x = 10; cannot assign statement to another statement 
    1 Variable declarations : let x = 5;
    2 Function definitions : fn foo() { }
    3 Control flow statements: 
        - if condition {/* code */}
        else     {/* code */}
        - while condition {} 


# use const or static for global variables



